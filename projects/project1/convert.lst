     1                                  	;; convert.asm: converter for binary to hex, hex to decimal, etc
     2                                  	extern printf
     3                                  
     4                                  	section .data
     5 00000000 3132362E33373500        dec1:	db	'1','2','6','.','3','7','5',0
     6 00000008 B715000000000000        bin1:	dq	01010110110111B ; 10101101.10111 note where binary point should be
     7 00000010 313236203D20256C64-     fmt1:	db 	"126 = %ld%ld%ld%ld%ld",0 ; format for 126 first 5 bits
     8 00000019 256C64256C64256C64-
     9 00000022 256C6400           
    10 00000026 256C64256C640A00        fmt2:	db 	"%ld%ld",10,0		     ; format for last 2 bits and line feed
    11 0000002E 2E333735203D20256C-     fmt3:	db 	".375 = %ld%ld%ld",10,0   ; format for .375
    12 00000037 64256C64256C640A00 
    13 00000040 256300                  fmt_char:	db 	"%c",0		  ; no '\n' thus no 10
    14 00000043 25316C6400              fmt_dig:	db 	"%1ld",0	  ; print just one digit, e.g. 0 or 1
    15 00000048 0A00                    fmt_end:	db 	10, 0		  ; just end line
    16 0000004A 0000000000000000        whole:	dq	0
    17 00000052 0000000000000000        frack:	dq	0
    18 0000005A 6400000000000000        a100:	dq	100
    19 00000062 0A00000000000000        a10:	dq	10
    20                                  
    21                                  	section .bss
    22 00000000 <res 00000038>          bitw:	resq	7		;reserve 7 64-bit word for bits 1 or 0 (whole)
    23 00000038 <res 00000018>          bitf:	resq	3		;reserve 3 words for bits 1 or 0 (fraction)
    24                                  
    25                                  	section .text
    26                                  
    27                                  	global	main
    28                                  main:
    29 00000000 55                      	push	rbp
    30                                  decToBin:	
    31 00000001 48B800000000000000-     	mov  	rax,0
    32 0000000A 00                 
    33 0000000B 8A0425[00000000]        	mov  	al,[dec1]
    34 00000012 482D30000000            	sub  	rax,48 		; now have binary 1
    35 00000018 48F72C25[5A000000]      	imul 	qword [a100] 	; now have binary 100 add 2*10+6 [dec1+1]*10+[dec1+2]
    36 00000020 48890425[00000000]      	mov  	[bitw], rax 
    37                                  
    38 00000028 48B800000000000000-     	mov  	rax,0
    39 00000031 00                 
    40 00000032 8A0425[01000000]        	mov  	al,[dec1+1]
    41 00000039 482D30000000            	sub  	rax,48 		; now have binary 1
    42 0000003F 48F72C25[62000000]      	imul 	qword [a10]
    43 00000047 48030425[00000000]      	add  	rax, [bitw]  	; now have binary 120
    44 0000004F 48890425[00000000]      	mov  	[bitw], rax
    45                                  binToDec:
    46 00000057 488B0425[08000000]      	mov  	rax, [bin1]
    47 0000005F 48C1E805                	shr  	rax, 5       	; shift off .10111  5 bits
    48 00000063 48890425[4A000000]      	mov  	[whole], rax 	; save  10101101  can print with %ld
    49                                  
    50 0000006B 488B0425[08000000]      	mov  	rax, [bin1]
    51 00000073 48251F000000            	and  	rax, 31     	; 31 in binary is  11111  save the fraction
    52 00000079 48890425[52000000]      	mov  	[frack], rax
    53                                  printDec:
    54 00000081 48BF-                   	mov	rdi,fmt_char	; print a single character
    55 00000083 [4000000000000000] 
    56 0000008B 48B800000000000000-     	mov     rax, 0		; be safe, zero all rax
    57 00000094 00                 
    58 00000095 8A0425[00000000]        	mov	al, [dec1]	; byte into bottom of rax
    59 0000009C 4889C6                  	mov	rsi, rax	; must go 64-bit to 64-bit
    60 0000009F 48B800000000000000-     	mov	rax, 0		; no float
    61 000000A8 00                 
    62 000000A9 E8(00000000)            	call    printf
    63                                  
    64 000000AE 48BF-                   	mov	rdi,fmt_dig	; print a single character as digit
    65 000000B0 [4300000000000000] 
    66 000000B8 48B800000000000000-     	mov     rax, 0		; be safe, zero all rax
    67 000000C1 00                 
    68 000000C2 8A0425[01000000]        	mov	al, [dec1+1]	; next byte into bottom of rax
    69 000000C9 482D30000000            	sub	rax, 48		; change character digit to number
    70                                  	;;        imul    rax, 10         ; '2' is 20  need to add up 1*100+2*10+4
    71 000000CF 4889C6                  	mov	rsi, rax	; must go 64-bit to 64-bit
    72 000000D2 48B800000000000000-     	mov	rax, 0		; no float
    73 000000DB 00                 
    74 000000DC E8(00000000)            	call    printf
    75                                  
    76 000000E1 48BF-                   	mov	rdi,fmt_end	; print end of line
    77 000000E3 [4800000000000000] 
    78 000000EB 48B800000000000000-     	mov	rax, 0		; no float
    79 000000F4 00                 
    80 000000F5 E8(00000000)            	call    printf
    81                                  printBin:
    82                                  	;;  compute bits for 126 into bitw   top bit first
    83                                  	;;  compute bits for .375 into bitf  top bit first
    84                                  
    85 000000FA 48BF-                   	mov     rdi, fmt1 ; first arg, format
    86 000000FC [1000000000000000] 
    87 00000104 488B3425[00000000]      	mov	rsi, [bitw]	  ; second arg
    88 0000010C 488B1425[08000000]      	mov     rdx, [bitw+1*8]	  ; third arg
    89 00000114 488B0C25[10000000]      	mov     rcx, [bitw+2*8]	  ; fourth arg
    90 0000011C 4C8B0425[18000000]      	mov     r8,  [bitw+3*8]	  ; fifth arg
    91 00000124 4C8B0C25[20000000]      	mov     r9,  [bitw+4*8]	  ; sixth arg
    92 0000012C 48B800000000000000-     	mov     rax, 0		  ; no xmm used
    93 00000135 00                 
    94 00000136 E8(00000000)            	call    printf		  ; Call C function
    95                                  
    96 0000013B 48BF-                   	mov     rdi, fmt2 ; first arg, format
    97 0000013D [2600000000000000] 
    98 00000145 488B3425[28000000]      	mov     rsi, [bitw+5*8]	  ; seventh arg
    99 0000014D 488B1425[30000000]      	mov     rdx, [bitw+6*8]	  ; eighth arg
   100 00000155 48B800000000000000-     	mov     rax, 0		  ; no xmm used
   101 0000015E 00                 
   102 0000015F E8(00000000)            	call    printf		  ; Call C function
   103                                  
   104 00000164 48BF-                   	mov     rdi, fmt3 ; first arg, format
   105 00000166 [2E00000000000000] 
   106 0000016E 488B3425[38000000]      	mov     rsi, [bitf]	  ; second arg
   107 00000176 488B1425[40000000]      	mov     rdx, [bitf+8]	  ; third arg
   108 0000017E 488B0C25[48000000]      	mov     rcx, [bitf+2*8]	  ; forth arg
   109 00000186 48B800000000000000-     	mov     rax, 0		  ; no xmm used
   110 0000018F 00                 
   111 00000190 E8(00000000)            	call    printf		  ; Call C function
   112                                  
   113 00000195 48B800000000000000-     	mov	rax,0
   114 0000019E 00                 
   115 0000019F B000                    	mov	al,0
   116 000001A1 48BF00000000000000-     	mov	rdi,0
   117 000001AA 00                 
   118 000001AB 48BE00000000000000-     	mov	rsi,0
   119 000001B4 00                 
   120 000001B5 48BA00000000000000-     	mov	rdx,0
   121 000001BE 00                 
   122 000001BF 48B900000000000000-     	mov	rcx,0
   123 000001C8 00                 
   124 000001C9 49B800000000000000-     	mov	r8,0
   125 000001D2 00                 
   126 000001D3 49B900000000000000-     	mov	r9,0
   127 000001DC 00                 
   128 000001DD 5D                      	pop	rbp
   129 000001DE C3                      	ret
